services:
  # =========================
  # Backend - 開發模式（無需 Dockerfile）
  # =========================
  backend-dev:
    profiles: ["dev"]
    image: maven:3.9-eclipse-temurin-21
    container_name: spring-backend-dev
    working_dir: /workspace
    volumes:
      - ./backend:/workspace            # 掛原始碼，支援熱重載（建議加入 spring-boot-devtools）
      - maven_cache:/root/.m2           # 加速相依快取
    environment:
      SPRING_PROFILES_ACTIVE: dev
      DB_HOST: mysql
      DB_PORT: "3306"
      DB_NAME: ${MYSQL_DATABASE}
      DB_USER: ${MYSQL_USER}
      DB_PASSWORD: ${MYSQL_PASSWORD}
      TZ: ${TZ}
      APP_JWT_SECRET: ${APP_JWT_SECRET}
      APP_JWT_EXP_MINUTES: ${APP_JWT_EXP_MINUTES}
    command: >
      bash -lc "mvn -q \
      -Dspring-boot.run.profiles=${SPRING_PROFILES_ACTIVE:-dev} \
      -Dspring-boot.run.jvmArguments=\"-Duser.timezone=${TZ:-Asia/Taipei} -Dapp.jwt.secret=${APP_JWT_SECRET} -Dapp.jwt.exp-minutes=${APP_JWT_EXP_MINUTES}\" \
      spring-boot:run"

    depends_on:
      mysql:
        condition: service_healthy
    ports:
      - "${APP_PORT}:8080"
    networks: [ appnet ]
    restart: unless-stopped

  # =========================
  # Backend - 正式/封包後執行（需要 backend/Dockerfile）
  # =========================
  backend:
    profiles: ["prod"]
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: spring-backend
    environment:
      SPRING_PROFILES_ACTIVE: prod
      DB_HOST: mysql
      DB_PORT: "3306"
      DB_NAME: ${MYSQL_DATABASE}
      DB_USER: ${MYSQL_USER}
      DB_PASSWORD: ${MYSQL_PASSWORD}
      TZ: ${TZ}
    ports:
      - "${APP_PORT}:8080"
    depends_on:
      mysql:
        condition: service_healthy
    networks: [ appnet ]
    restart: unless-stopped

  # =========================
  # Frontend - 開發模式（Vite/React Dev Server）
  # =========================
  frontend-dev:
    profiles: ["dev"]
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: web-dev
    working_dir: /app
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      TZ: ${TZ}
      VITE_API_BASE_URL: http://localhost:8080/api   # 指向 backend-dev
      CHOKIDAR_USEPOLLING: "true"
      CHOKIDAR_INTERVAL: "300"
    ports:
      - "${WEB_PORT}:5173"
    depends_on:
      - backend-dev
    networks: [ appnet ]
    restart: unless-stopped

  # =========================
  # Frontend - 正式模式（Nginx 靜態檔 + 反代 /api）
  # =========================
  frontend:
    profiles: ["prod"]
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: web
    environment:
      TZ: ${TZ}
    ports:
      - "${WEB_PORT}:80"
    depends_on:
      - backend
    networks: [ appnet ]
    restart: unless-stopped

  # =========================
  # MySQL
  # =========================
  mysql:
    image: mysql:8.0
    container_name: mysql
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      TZ: ${TZ}
    command:
      - --default-authentication-plugin=mysql_native_password
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
    ports:
      - "${MYSQL_PORT}:3306"   # 只在需要從宿主連線時保留
    volumes:
      - db_data:/var/lib/mysql
      # - ./init-sql:/docker-entrypoint-initdb.d:ro   # 若不用 Flyway、想首次自動建表可開啟
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h 127.0.0.1 -uroot -p$${MYSQL_ROOT_PASSWORD} --silent"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks: [ appnet ]
    restart: unless-stopped

  # =========================
  # phpMyAdmin
  # =========================
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: pma
    environment:
      PMA_HOST: mysql
      PMA_USER: root
      PMA_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      UPLOAD_LIMIT: 256M
      TZ: ${TZ}
    ports:
      - "${PMA_PORT}:80"
    depends_on:
      - mysql
    networks: [ appnet ]
    restart: unless-stopped

networks:
  appnet: {}

volumes:
  db_data: {}
  maven_cache: {}
